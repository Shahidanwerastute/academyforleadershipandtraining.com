<?php/** * Class and Function List: * Function list: * - __construct() * - validator() * - create() * - getRegister() * - postRegister() * - register() * - confirm() * Classes list: * - RegisterController extends Controller */namespace App\Http\Controllers\Auth;use App\Http\Controllers\Controller;use Illuminate\Support\Facades\Validator;use Illuminate\Foundation\Auth\RegistersUsers;use Illuminate\Contracts\Auth\Guard;use Illuminate\Http\Request;use App\Libraries\Functions;use App\Libraries\Upload;use App\Mail\Email;use App\Role;use App\User;use App\Models\Store;use App\Models\Contacts;use DB, Config, URL, Auth, View, Socialite, Route, Mail, Str;class RegisterController extends Controller{    /*    |--------------------------------------------------------------------------    | Register Controller    |--------------------------------------------------------------------------    |    | This controller handles the registration of new users as well as their    | validation and creation. By default this controller uses a trait to    | provide this functionality without requiring any additional code.    |    */    use RegistersUsers;    /**     * Where to redirect users after registration.     *     * @var string     */    protected $auth;    protected $redirectTo = '/';    private $unique_code;    private $confirmation_link;    private $profile_pic;    protected $username;    /**     * Create a new controller instance.     *     * @return void     */    public function __construct(Guard $auth)    {        $this->middleware('guest');        $this->auth = $auth;    }    /**     * Get a validator for an incoming registration request.     *     * @param  array  $data     * @return \Illuminate\Contracts\Validation\Validator     */    protected function validator(array $data)    {        $attribute = array(            'first_name' => 'First Name',            'last_name' => 'Last Name',            'email' => 'Email',            'password' => 'Password',            'business_name' => 'Business Name',        );        $messages = ['agree.required' => 'Please Acknowledge the Terms and Conditions in order to continue', ];        $validator = Validator::make($data, ['first_name' => 'bail|required|min:3|max:25|valid_profile_username', 'last_name' => 'bail|required|min:3|max:25|valid_profile_username', 'email' => 'bail|required|email|confirmed|verification_email|unique:users,email', 'password' => 'bail|required|min:6|confirmed', 'business_name' => 'bail|required', 'agree' => 'required'], $messages);        return $validator->setAttributeNames($attribute);    }    /**     * Create a new user instance after a valid registration.     *     * @param  array  $data     * @return User     */    protected function create(array $data)    {        $this->unique_code = str_random(30);        $profile_pictureDimensions = '25x25';        $fetch_data = strtoLower($profile_pictureDimensions);        $fetch_data = explode('x', $fetch_data);        $picture_width = $fetch_data[0];        $picture_height = $fetch_data[1];        $obj = new Upload();        $profile_picture = $obj->defaultAvatar($data['first_name'] . ' ' . $data['last_name'], 'public/assets/manage_store/images/users-profile/', $picture_width, $picture_height);        $store_logo = $obj->defaultAvatar($data['business_name'], 'public/assets/manage_store/images/store/', $picture_width, $picture_height);        $obj->uploadFile(3, $profile_picture, 'public/assets/manage_store/images/users-profile/', $profile_picture, true);        $obj->uploadFile(3, $store_logo, 'public/assets/manage_store/images/users-profile/', $store_logo, true);        /*User Created*/        $user_info = User::create(['first_name' => $data['first_name'], 'last_name' => $data['last_name'], 'email' => $data['email'], 'image' => $profile_picture, 'password' => bcrypt($data['password']) , 'confirmation_code' => $this->unique_code, ]);        /*Contact Created*/        $contact = Contacts::create(['user_id' => $user_info->id, ]);        /*Assign Store*/        $store = Store::create(['business_name' => $data['business_name'], 'slug' => Str::slug($data['business_name'], '_') , 'logo' => $store_logo, ]);        $user_info->assign_store($store);        //Assign Role        $role = Role::whereName('user')->first();        $user_info->assignRole($role);        /*Assign Language*/        $user_info->assign_language(default_language()            ->id);        $this->data['confirmation_link'] = '<a href="' . URL::to('verify/' . $this->unique_code) . '">' . route('confirmation_path') . '</a>';        if (Functions::_is_image_exist('public/assets/manage_store/images/users-profile/' . $profile_picture)) $this->data['profile_pic'] = '<a><img style="width:50px;min-height:50px" src="' . Functions::_is_image_exist('public/assets/manage_store/images/users-profile/' . $profile_picture) . '" alt="' . $data['first_name'] . ' ' . $data['last_name'] . '"></a>';        else $this->data['profile_pic'] = '<a><img style="width:50px;min-height:50px" src="' . Functions::_myDefault_profile_picture($data['gender']) . '" alt="' . $data['first_name'] . ' ' . $data['last_name'] . '"></a>';        $this->data['code'] = $this->unique_code;        $this->data['subject'] = "Registration | " . config('app.name');        $this->data['user'] = $data;        $this->data['view'] = 'emails.register';        Mail::to($data['email'])->send(new Email($this->data));        return $user_info;    }    public function getRegister()    {        if (property_exists($this, 'registerView'))        {            return view($this->registerView);        };        return View::make('auth.register')            ->with('data', $this->data);    }    public function postRegister(Request $request)    {        return $this->register($request);    }    public function register(Request $request)    {        $validator = $this->validator($request->all());        if ($validator->fails())        {            $this->throwValidationException($request, $validator);        }        $this->create($request->all());        $request->session()            ->put('email', $request->email);        return redirect(route('confirmation_path'))            ->with('message', trans('messages.confirmationCode'));    }    public function confirm(Request $request, $confirmation_code = '')    {        if ($request->isMethod('post'))        {            $confirmation_code = $request->code;            $this->validate($request, ['code' => 'required']);        }        if ($confirmation_code)        {            $user = User::whereConfirmationCode($confirmation_code)->first();            if (!$user)            {                return redirect()->back()                    ->with('error', trans('messages.invalid_code'));            }            $user->confirmed = 1;            $user->confirmation_code = null;            $user->save();            return redirect()                ->route('login')                ->with('message', trans('messages.confirm'));        }        else        {            return View::make('auth.verifications.verify')                ->with('data', $this->data);        }    }}