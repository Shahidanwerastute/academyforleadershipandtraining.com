<?phpnamespace App\Http\Controllers\admin\survey;use App\Employee;use App\FriendAssessment;use App\Mail\Email;use Illuminate\Http\Request;use App\Http\Controllers\admin\Controller;use App\Survey as SurveyModel;use App\SurveyField;use App\SurveyFieldValue;use App\SurveySubmission;use App\Category;use DB, View, Validator, Route, Auth, File, Carbon\Carbon, Mail, URL, Excel, Session;class Survey extends Controller {    public $successStatus = 200;    public function __construct() {        parent::__construct();        DB::enableQueryLog();    }    public function index() {        return View::make('admin.survey.index')->with('data', $this->data);    }    public function listing(Request $request) {        if ($request->isMethod('post') && $request->get('type') == "surveys") {            $jtStartIndex = $_REQUEST['jtStartIndex'];            $jtPageSize = $_REQUEST['jtPageSize'];            $query = SurveyModel::where('group_id', $this->data['group_info']                ->id);            if (!empty($request->name)) {                $query->where('title', 'like', '%' . $request->name . '%');            }            $query->orderBy('created_at', 'DESC');            $dataCount = $query->count();            $query->limit($jtPageSize)->offset($jtStartIndex);            $data = $query->get();            $this->response['Result'] = "OK";            $this->response['TotalRecordCount'] = $dataCount;            $this->response['Records'] = $data;            return json_encode($this->response);        }        else if ($request->isMethod('post') && $request->get('type') == "survey_fields") {            $jtStartIndex = $_REQUEST['jtStartIndex'];            $jtPageSize = $_REQUEST['jtPageSize'];            $query = SurveyField::where('survey_id', $request->survey_id);            $query->orderBy('display_order', 'ASC');            $dataCount = $query->count();            $query->limit($jtPageSize)->offset($jtStartIndex);            $data = $query->get();            $this->response['Result'] = "OK";            $this->response['TotalRecordCount'] = $dataCount;            $this->response['Records'] = $data;            return json_encode($this->response);        }        else if ($request->isMethod('post') && $request->get('type') == "survey_field_values") {            $jtStartIndex = $_REQUEST['jtStartIndex'];            $jtPageSize = $_REQUEST['jtPageSize'];            $query = SurveyFieldValue::where('survey_id', $request->survey_id)                ->where('survey_field_id', $request->survey_field_id);            $query->orderBy('created_at', 'ASC');            $dataCount = $query->count();            $query->limit($jtPageSize)->offset($jtStartIndex);            $data = $query->get();            $this->response['Result'] = "OK";            $this->response['TotalRecordCount'] = $dataCount;            $this->response['Records'] = $data;            return json_encode($this->response);        }    }    public function create(Request $request) {        if ($request->isMethod('post') && $request->get('type') == "survey_create") {            $attributes = array(                'title' => 'Title',                //'title_ar' => 'Title (Arabic)',            );            $validator = Validator::make($request->all() , ['title' => 'bail|required|unique:survey,title,null,null,group_id,' . $this->data['group_info']->id,                //'title_ar' => 'bail|required',            ], [], $attributes);            if ($validator->passes()) {                $survey = new SurveyModel();                $survey->title = $request->title;                //$survey->title_ar = $request->title_ar;                $survey->description1 = $request->description1;                //$survey->description1_ar = $request->description1_ar;                $survey->description2 = $request->description2;                //$survey->description2_ar = $request->description2_ar;                //$survey->active = $request->active;                $survey->slug = str_slug($this->data['group_info']->name, '-') . '-' . str_slug($request->title, '-') . '-' . time();                $survey->group_id = $this->data['group_info']->id;                $survey->save();                $this->response['Result'] = "OK";                $this->response['Record'] = $survey;                return json_encode($this->response);            }        }        else if ($request->isMethod('post') && $request->get('type') == "survey_field_create") {            $attributes = array(                'label' => 'Label',                //'label_ar' => 'Label (Arabic)',                'type' => 'Type',                'survey_id' => 'Survey',                //'category_id' => 'Category',            );            $validator = Validator::make($request->all() , ['label' => 'bail|required',                //'label_ar' => 'bail|required',                'type' => 'bail|required', 'survey_id' => 'bail|required',                //'category_id' => 'bail|required',            ], [], $attributes);            if ($validator->passes()) {                $record = new SurveyField();                $record->label = $request->label;                //$record->label_ar = $request->label_ar;                $record->type = $request->type;                $record->survey_id = $request->survey_id;                $record->active = $request->active;                //$record->category_id = $request->category_id;                $record->require = $request->require;                $record->is_grid = $request->is_grid;                $record->save();                $this->response['Result'] = "OK";                $this->response['Record'] = $record;                return json_encode($this->response);            }        }        else if ($request->isMethod('post') && $request->get('type') == "survey_field_value_create") {            $attributes = array(                'value' => 'Option',                //'value_ar' => 'Option (Arabic)',                //'icon' => 'Icon',                //'color' => 'Color',            );            $validator = Validator::make($request->all() , ['value' => 'bail|required',                //'value_ar' => 'bail|required',                //'icon' => 'bail|required',                //'color' => 'bail|required',            ], [], $attributes);            if ($validator->passes()) {                $record = new SurveyFieldValue();                $record->survey_id = $request->survey_id;                $record->survey_field_id = $request->survey_field_id;                $record->value = $request->value;                //$record->value_ar = $request->value_ar;                //$record->icon = $request->icon;                // $record->color = $request->color;                $record->save();                $this->response['Result'] = "OK";                $this->response['Record'] = $record;                return json_encode($this->response);            }        }        $this->response['Result'] = "ERROR";        $this->response['Message'] = set_error_delimeter($validator->errors()            ->all());        return json_encode($this->response);    }    public function update(Request $request) {        if ($request->isMethod('post') && $request->get('type') == "survey_update") {            $attributes = array(                'title' => 'Title',                //'title_ar' => 'Title (Arabic)',            );            $validator = Validator::make($request->all() , ['title' => 'bail|required|unique:survey,title,' . $request->id . ',id,group_id,' . $this->data['group_info']->id,                //'title_ar' => 'bail|required',            ], [], $attributes);            if ($validator->passes()) {                $survey = SurveyModel::where('id', $request->id)                    ->where('group_id', $this->data['group_info']                        ->id)                    ->first();                $survey->title = $request->title;                //$survey->title_ar = $request->title_ar;                //$survey->slug = str_slug($this->data['group_info']->name, '-').'-'.str_slug($request->title, '-');                $survey->description1 = $request->description1;                //$survey->description1_ar = $request->description1_ar;                $survey->description2 = $request->description2;                //$survey->description2_ar = $request->description2_ar;                //$survey->active = $request->active;                $survey->save();                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }        else if ($request->isMethod('post') && $request->get('type') == "survey_field_update") {            $attributes = array(                'label' => 'Label',                //'label_ar' => 'Label (Arabic)',                'type' => 'Type',                'survey_id' => 'Survey',                //'category_id' => 'Category',            );            $validator = Validator::make($request->all() , ['label' => 'bail|required',                //'label_ar' => 'bail|required',                'type' => 'bail|required', 'survey_id' => 'bail|required',                //'category_id' => 'bail|required',            ], [], $attributes);            if ($validator->passes()) {                $record = SurveyField::findOrFail($request->id);                $record->label = $request->label;                //$record->label_ar = $request->label_ar;                $record->type = $request->type;                $record->survey_id = $request->survey_id;                $record->active = $request->active;                //$record->category_id = $request->category_id;                $record->require = $request->require;                $record->is_grid = $request->is_grid;                $record->save();                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }        else if ($request->isMethod('post') && $request->get('type') == "survey_field_value_update") {            $attributes = array(                'value' => 'Option',                //'value_ar' => 'Option (Arabic)',                //'icon' => 'Icon',                //'color' => 'Color',            );            $validator = Validator::make($request->all() , ['value' => 'bail|required',                //'value_ar' => 'bail|required',                //'icon' => 'bail|required',                //'color' => 'bail|required',            ], [], $attributes);            if ($validator->passes()) {                $record = SurveyFieldValue::findOrFail($request->id);                $record->value = $request->value;                //$record->value_ar = $request->value_ar;                //$record->icon = $request->icon;                //$record->color = $request->color;                $record->save();                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }        $this->response['Result'] = "ERROR";        $this->response['Message'] = set_error_delimeter($validator->errors()            ->all());        return json_encode($this->response);    }    public function delete(Request $request) {        if ($request->isMethod('post') && $request->get('type') == "survey_delete") {            $record = SurveyModel::where('id', $request->id)                ->where('group_id', $this->data['group_info']                    ->id)                ->first();            if ($record->delete()) {                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }        else if ($request->isMethod('post') && $request->get('type') == "survey_field_delete") {            $record = SurveyField::findOrFail($request->id);            if ($record->delete()) {                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }        else if ($request->isMethod('post') && $request->get('type') == "survey_field_value_delete") {            $record = SurveyFieldValue::findOrFail($request->id);            if ($record->delete()) {                if (File::isFile('public/assets/admin/images/survey/' . $record->value)) {                    \File::delete('public/assets/admin/images/survey/' . $record->value);                }                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }    }    public function submissions(Request $request) {        $this->data['survey'] = SurveyModel::where('group_id', $this->data['group_info']->id)->first();        if ($this->data['survey']) {            $this->data['questions'] = $this->data['survey']->questions();            if ($request->isMethod('post')) {                $query = SurveySubmission::query();                $query->join('employee', function ($join) {                    $join->on('employee.id', '=', 'survey_submission.employee_id');                });                $query->join('survey_answer', function ($join) {                    $join->on('survey_answer.survey_submission_id', '=', 'survey_submission.id');                });                //$query->where('survey_submission.survey_id', $this->data['survey']->id);                $query->where('survey_submission.group_id', $this->data['group_info']->id);                if($this->data['group_info']->id == 1) $query->where('survey_submission.p_status', 1);                if ($request->behavior) $query->where('survey_submission.behavior', $request->behavior);                if ($request->sub_behavior) $query->where('survey_submission.sub_behavior', $request->sub_behavior);                if ($request->start) $query->whereRaw('date(survey_submission.created_at) >= ?', [Carbon::parse($request->start)->toDateString() ]);                if ($request->end) $query->whereRaw('date(survey_submission.created_at) <= ?', [Carbon::parse($request->end)->toDateString() ]);                if(isset($this->data['route-paramters']['parent_assessment_id']))                    $query->where('survey_submission.parent_assessment_id', $this->data['route-paramters']['parent_assessment_id']);                else                    $query->whereNull('survey_submission.parent_assessment_id');                $query->orderBy('survey_submission.id','DESC');                $query->groupBy('survey_submission.id');                $query->select('employee.*', 'survey_submission.*', DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.survey_submission_id=survey_submission.id AND friend_assessment.is_submit = 1) as total_friend_submissions"), DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.survey_submission_id=survey_submission.id) as total_friends"));                $this->data['submissions'] = $query->paginate(25);                return response()                    ->json(['selector' => ".records", 'records' => View::make('admin.survey.ajax.submissions')                        ->with('data', $this->data)                        ->render() , ], $this->successStatus);            } else {                $query = SurveySubmission::join('employee', function ($join) {                    $join->on('employee.id', '=', 'survey_submission.employee_id');                });                /* ->where('survey_submission.survey_id', $this->data['survey']                ->id) */                $query->where('survey_submission.group_id', $this->data['group_info']                    ->id);                if($this->data['group_info']->id == 1) $query->where('survey_submission.p_status', 1);                if(isset($this->data['route-paramters']['parent_assessment_id']))                    $query->where('survey_submission.parent_assessment_id', $this->data['route-paramters']['parent_assessment_id']);                else                    $query->whereNull('survey_submission.parent_assessment_id');                $query->orderBy('survey_submission.id','DESC');                $query->select('employee.*', 'survey_submission.*', DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.survey_submission_id=survey_submission.id AND friend_assessment.is_submit = 1) as total_friend_submissions"), DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.survey_submission_id=survey_submission.id) as total_friends"));                $this->data['submissions'] = $query->paginate(25);            }        }        if(isset($this->data['route-paramters']['parent_assessment_id'])) {            $this->data['employee_info'] = SurveySubmission::join('employee', function ($join) {                $join->on('employee.id', '=', 'survey_submission.employee_id');            })                ->where('survey_submission.id', $this->data['route-paramters']['parent_assessment_id'])                ->select('employee.*')                ->first();        }        return View::make('admin.survey.submissions')            ->with('data', $this->data);    }    public function download(Request $request) {        $this->data['survey'] = SurveyModel::where('group_id', $this->data['group_info']            ->id)            ->first();        $this->data['questions'] = $this->data['survey']            ->questions();        $query = SurveySubmission::where('survey_id', $this->data['survey']            ->id)            ->where('group_id', $this->data['group_info']                ->id);        if ($request->start) $query->whereRaw('date(created_at) >= ?', [Carbon::parse($request->start)            ->toDateString() ]);        if ($request->end) $query->whereRaw('date(created_at) <= ?', [Carbon::parse($request->end)            ->toDateString() ]);        $this->data['submissions'] = $query->get();        $excel_sheet_array = array();        foreach ($this->data['submissions'] as $key => $submission) {            foreach ($this->data['questions'] as $question) {                $answers = '';                if (in_array($question->type, array(                    'radio',                    'dropdown',                    'checkboxsquare',                    'checkbox',                    'checkboxicon',                    'select',                    'radioicon',                ))) {                    foreach ($submission->answers($question->id) as $option_key => $answer) {                        $answers .= ' (' . $option_key . ') ' . $answer->value . "\r\n";                    }                }                else {                    foreach ($submission->answers($question->id) as $option_key => $answer) {                        $answers .= $answer->answer;                    }                }                $excel_sheet_array[$key][$question->label] = $answers;            }        }        Excel::create($this->data['survey']->title, function ($excel) use ($excel_sheet_array) {            $excel->sheet($this->data['survey']->title, function ($sheet) use ($excel_sheet_array) {                $sheet->fromArray($excel_sheet_array);                $sheet->getStyle('H5')                    ->getAlignment()                    ->setWrapText(true);            });        })            ->export('xls');    }    public function copy(Request $request) {        $this->data['survey'] = SurveyModel::where('group_id', $this->data['group_info']            ->id)            ->where('id', $request->survey_id)            ->first();        $copy_survey = $this->data['survey']            ->replicate();        $copy_survey->title = $this->data['survey']->title;        $copy_survey->slug = str_slug($this->data['group_info']->name, '-') . '-' . str_slug($this->data['survey']->title, '-') . '-' . time();        //$copy_survey->title_ar = $this->data['survey']->title_ar;        $copy_survey->save();        foreach ($this->data['survey']                     ->questions() as $question) {            $copy_question = new SurveyField();            $copy_question->label = $question->label;            //$copy_question->label_ar = $question->label_ar;            $copy_question->type = $question->type;            $copy_question->active = $question->active;            $copy_question->require = $question->require;            $copy_question->is_grid = $question->is_grid;            //$copy_question->category_id = $question->category_id;            $copy_question->survey_id = $copy_survey->id;            $copy_question->display_order = $question->display_order;            $copy_question->save();            foreach ($question->options() as $option) {                $copy_option = new SurveyFieldValue();                $copy_option->survey_id = $copy_survey->id;                $copy_option->survey_field_id = $copy_question->id;                $copy_option->value = $option->value;                $copy_option->icon = $option->icon;                $copy_option->color = $option->color;                //$copy_option->value_ar = $option->value_ar;                if ($option->image) {                    $tmp = explode('.', $option->image);                    $file_extension = end($tmp);                    $image = $option->id . time() . '.' . $file_extension;                    if (File::exists('public/assets/admin/images/survey/' . $option->image)) File::copy('public/assets/admin/images/survey/' . $option->image, 'public/assets/admin/images/survey/' . $image);                    $copy_option->image = $image;                }                $copy_option->save();            }        }    }    public function sorting(Request $request, $survey_id) {        if ($request->isMethod('post')) {            $array = $request->arrayorder;            $count = 1;            foreach ($array as $idval) {                SurveyField::where('id', $idval)->where('survey_id', $survey_id)->update(['display_order' => $count]);                $count++;            }        }        else {            $this->data['survey'] = SurveyModel::where('group_id', $this->data['group_info']                ->id)                ->where('id', $survey_id)->first();            return View::make('admin.survey.sorting')                ->with('data', $this->data);        }    }    public function result(Request $request) {        $this->data['submission'] = SurveySubmission::join('employee', function ($join) {            $join->on('employee.id', '=', 'survey_submission.employee_id');        })            ->where('survey_submission.id', $request->id)            ->where('survey_submission.group_id', $this->data['group_info']                ->id)            ->select('employee.*', 'survey_submission.*')            ->first();        $this->response['records'] = View::make('admin.survey.ajax.result')            ->with('data', $this->data)->render();        return json_encode($this->response);    }    public function aggregate(Request $request) {        $query = SurveySubmission::where('survey_submission.group_id', $this->data['group_info']            ->id);        if($this->data['group_info']->id == 1) $query->where('p_status', 1);        $query->where('id', $request->id);        $query->orWhere('parent_assessment_id', $request->id);        $result = $query->select(DB::raw("ROUND(AVG(b)) as b"), DB::raw("ROUND(AVG(a)) as a"), DB::raw("ROUND(AVG(l)) as l"), DB::raw("ROUND(AVG(r)) as r"))->first();        /*Fetch Quardinates*/        $h_value = $result['r']-$result['l'];        $v_value = $result['a']-$result['b'];        if($h_value == 5 || $h_value == 0) $h_value = $h_value - 1; else if($h_value == -5) $h_value = $h_value + 1;        if($v_value == 5 || $v_value == 0) $v_value = $v_value - 1; else if($v_value == -5) $v_value = $v_value + 1;        $h_value = ($h_value < 0 ? $h_value: '+'.$h_value);        $v_value = ($v_value < 0 ? $v_value: '+'.$v_value);        $h_sign = (str_contains($h_value, '-') ? '-' : '+');        $v_sign = (str_contains($v_value, '-') ? '-' : '+');        $this->data['record'] = DB::table('score')->where('h', $h_sign)->where('v', $v_sign)->first();        $this->data['sub_quadrant'] = DB::table('sub_quadrant')            ->where('h', 'like', '%' . $h_value . '%')            ->where('v', 'like', '%' . $v_value . '%')            ->first();        $this->response['behavior'] = URL::to('/').'/public/assets/admin/images/survey/'.strtolower($this->data['record']->behavior).'.png';        $this->response['sub_behavior'] = URL::to('/').'/public/assets/admin/images/survey/'.strtolower($this->data['record']->behavior).'_'.strtolower($this->data['sub_quadrant']->behavior).'.png';        return json_encode($this->response);    }    public function file_export(Request $request)    {        $this->data['survey'] = SurveyModel::where('group_id', $this->data['group_info']->id)->first();        if ($this->data['survey']) {            $this->data['questions'] = $this->data['survey']->questions();            $query = SurveySubmission::join('employee', function ($join) {                $join->on('employee.id', '=', 'survey_submission.employee_id');            });            /* ->where('survey_submission.survey_id', $this->data['survey']            ->id) */            $query->where('survey_submission.group_id', $this->data['group_info']                ->id);            if($this->data['group_info']->id == 1) $query->where('survey_submission.p_status', 1);            if(isset($this->data['route-paramters']['parent_assessment_id']))                $query->where('survey_submission.parent_assessment_id', $this->data['route-paramters']['parent_assessment_id']);            else                $query->whereNull('survey_submission.parent_assessment_id');            $query->select('employee.*', 'survey_submission.*', DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.survey_submission_id=survey_submission.id AND friend_assessment.is_submit = 1) as total_friend_submissions"), DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.survey_submission_id=survey_submission.id) as total_friends"));            $this->data['submissions'] = $query->get();        }        $group_name = str_replace(' ','-',$this->data['group_info']->name);        $excel_sheet = array();        $excel_sheet_array = array();        foreach ($this->data['submissions'] as $key => $submission) {            if($submission->mobile){                $mobile = $submission->mobile;            }else{                $mobile = '';            }            $excel_sheet[$key] = $submission;            $excel_sheet_array[$key]['date'] = date('M d, Y',strtotime($submission->created_at));            $excel_sheet_array[$key]['name'] = $submission->first_name.' '.$submission->last_name;            $excel_sheet_array[$key]['email'] = $submission->email;            $excel_sheet_array[$key]['mobile'] = $mobile;            $excel_sheet_array[$key]['-b + a'] = '- '.$submission->b.' + '.$submission->a.' = '.((- $submission->b) + $submission->a);            $excel_sheet_array[$key]['-l + r'] = '- '.$submission->l.' + '.$submission->r.' = '.((- $submission->l) + $submission->r);            $excel_sheet_array[$key]['style'] = 'Pri: '.ucfirst($submission->behavior) . ' | Sec: '.strtoupper($submission->sub_behavior);            $excel_sheet_array[$key]['behavior'] = $submission->behavior;        }        return Excel::create($group_name.'-submissions', function ($excel) use ($excel_sheet_array) {            $excel->sheet('survey-submissions', function ($sheet) use ($excel_sheet_array) {                // bold the column headers                $sheet->cell('A1:F1', function ($cells) {                    $cells->setFontWeight('bold');                    $cells->setAlignment('center');                    $cells->setBackground('#f6d8ac');                });                $i=2;                $sheet->row(1, ['Date', 'Name', 'Email', '-b + a', '-l + r', 'Style']);                foreach($excel_sheet_array as $excel_sheet){                    $col='F'.$i.':F'.$i;                    $color_code='#fff';                    if(strtolower($excel_sheet['behavior'])=='analytical'){                        $color_code = '#64b5e0';                    }elseif(strtolower($excel_sheet['behavior'])=='driver'){                        $color_code = '#9de258';                    }elseif(strtolower($excel_sheet['behavior'])=='amiable'){                        $color_code = '#ffc172';                    }elseif(strtolower($excel_sheet['behavior'])=='expressive'){                        $color_code = '#ffe160';                    }                    $sheet->cell($col, function ($cell) use ($color_code) {                        $cell->setBackground($color_code);                    });                    $sheet->row($i, [$excel_sheet['date'], $excel_sheet['name'], $excel_sheet['email'], $excel_sheet['-b + a'], $excel_sheet['-l + r'], $excel_sheet['style']]);                    $i++;                }            });        })            ->export('xlsx');    }    public function reminder(Request $request){        $group_id = $this->data['route-paramters']['group_id'];        $parent_assessment_id = $this->data['route-paramters']['parent_assessment_id'];        foreach(check_friend_submissions($group_id,$parent_assessment_id) as $row) {            if($row->is_submit == 0){                $submission_detail = get_submission_detail_via_survay_id($row->survey_submission_id);                $link_for_assessment = route('catalog-survey-friend-assessment-form', [$row->id]);                $this->data['view'] = 'emails.reminder';                $this->data['subject'] = "Reminder | Communication Assessment From The Academy For Leadership And Training";                $content = "<p>Hi ".$row->name.",</p>";                $content .= "<p>This is a reminder to complete the Communication Assessment for ".$submission_detail->first_name." ".$submission_detail->last_name.". Would you please complete this assessment at your earliest convenience?</p>";                $content .= "<a href='".$link_for_assessment."'>Click here to start Assessment</a>";                $this->data['content'] = $content;                Mail::to($row->email)->send(new Email($this->data));            }        }        $this->response['message'] = "Email Sent";        $this->response['result'] = "OK";        return json_encode($this->response);    }    public function friend_reminder(Request $request){        $employee_id = $this->data['route-paramters']['employee_id'];        $employee_detail = Employee::where('id', $employee_id)->first();        foreach(employee_friends_for_email($employee_id) as $row) {            if($row->is_submit == 0){                $link_for_assessment = route('catalog-survey-employee-friend-assessment-form', [$row->id]);                $this->data['view'] = 'emails.reminder';                $this->data['subject'] = "Reminder | Communication Assessment From The Academy For Leadership And Training";                $content = "<p>Hi ".$row->name.",</p>";                $content .= "<p>This is a reminder to complete the Communication Assessment for ".$employee_detail->first_name." ".$employee_detail->last_name.". Would you please complete this assessment at your earliest convenience?</p>";                $content .= "<a href='".$link_for_assessment."'>Click here to start Assessment</a>";                $this->data['content'] = $content;                Mail::to([$row->email])->send(new Email($this->data));                session()->put('friend_message','Reminder email sent to raters.');            }        }        $this->response['message'] = "Email sent to raters.";        $this->response['result'] = "OK";        return json_encode($this->response);    }    public function employee_reminder(Request $request){        $employee_id = $this->data['route-paramters']['employee_id'];        $employee_detail = Employee::where('id', $employee_id)->first();        $link_for_assessment = route('catalog-survey-employee-assessment-form', [$employee_id]);        $this->data['view'] = 'emails.reminder';        $this->data['subject'] = "Reminder | Communication Assessment From The Academy For Leadership And Training";        $content = "<p>Hi ".$employee_detail->first_name." ".$employee_detail->last_name.",</p>";        $content .= "<p>This is a reminder to complete the Communication Assessment. Would you please complete this self assessment at your earliest convenience?</p>";        $content .= "<a href='".$link_for_assessment."'>Click here to start Self Assessment</a>";        $this->data['content'] = $content;        Mail::to([$employee_detail->email])->send(new Email($this->data));        session()->put('main_user_message','Reminder email sent to rater.');        $this->response['message'] = "Email sent to raters";        $this->response['result'] = "OK";        return json_encode($this->response);    }}