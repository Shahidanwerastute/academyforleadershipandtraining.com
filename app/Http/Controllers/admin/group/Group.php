<?phpnamespace App\Http\Controllers\admin\group;use Illuminate\Http\Request;use App\Http\Controllers\admin\Controller;use App\Group as GroupModel;use App\Role;use App\Category;use App\Survey;use App\Mail\Email;use DB, View, Validator, Route, Auth, File, Carbon\Carbon, Mail, URL, Excel;class Group extends Controller{    public function __construct()    {        parent::__construct();    }    public function index(Request $request)    {        return View::make('admin.group.index')->with('data', $this->data);    }    public function listing(Request $request)    {        if ($request->isMethod('post'))        {            $jtStartIndex = $_REQUEST['jtStartIndex'];            $jtPageSize = $_REQUEST['jtPageSize'];            $query = GroupModel::where('id', '!=', 1);            if (!empty($request->name))            {                $query->where('name', 'like', '%' . $request->name . '%');            }            if (!empty($_REQUEST['jtSorting']) && $_REQUEST['jtSorting'] != "undefined")            {                $jtSorting = explode(' ', $_REQUEST['jtSorting']);                $query = $query->orderBy($jtSorting[0], $jtSorting[1]);            }            $query->orderBy('created_at', 'DESC');            $dataCount = $query->count();            $query->limit($jtPageSize)->offset($jtStartIndex);            $data = $query->get();            $this->response['Result'] = "OK";            $this->response['TotalRecordCount'] = $dataCount;            $this->response['Records'] = $data;            return json_encode($this->response);        }    }    public function update(Request $request)    {        if ($request->isMethod('post'))        {            $attributes = array(                'name' => 'Name',                'limit' => 'Survey Submissions Limit',                'coupon' => 'Coupon Code',            );            $validator = Validator::make($request->all() , [				'name' => 'bail|required|unique:group,name,' . $request->id . ',id',				'limit' => 'bail|required|integer',			], [], $attributes);            if ($validator->passes())            {                $record = GroupModel::where('id', $request->id)                    ->first();                $record->name = $request->name;                $record->limit = $request->limit;                $record->coupon = $request->coupon;                $record->save();                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }        $this->response['Result'] = "ERROR";        $this->response['Message'] = $validator->errors()            ->all();        return json_encode($this->response);    }    public function create(Request $request)    {        if ($request->isMethod('post'))        {            $attributes = array(                'name' => 'Name',				'limit' => 'Survey Submissions Limit',                'coupon' => 'Coupon Code',            );            $validator = Validator::make($request->all() , [				'name' => 'bail|required|unique:group,name', 				'limit' => 'bail|required|integer',			], [], $attributes);            if ($validator->passes())            {                $record = new GroupModel();                $record->name = $request->name;				$record->limit = $request->limit;                $record->coupon = $request->coupon;                $record->save();                $this->copy($record);                $this->response['Result'] = "OK";                $this->response['Record'] = $record;                return json_encode($this->response);            }        }        $this->response['Result'] = "ERROR";        $this->response['Message'] = set_error_delimeter($validator->errors()            ->all());        return json_encode($this->response);    }    public function delete(Request $request)    {        if ($request->isMethod('post'))        {            $record = GroupModel::where('id', $request->id)                ->first();            if ($record->delete())            {                /*Forget session for selected group*/                $request->session()                    ->forget('group_id');                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }    }    public function groups(Request $request)    {        $result = GroupModel::where('id', '!=', 1)->get();        $rows[] = array(            "DisplayText" => "",            "Value" => ""        );        foreach ($result as $key => $value)        {            $rows[$key + 1]['DisplayText'] = $value->name;            $rows[$key + 1]['Value'] = $value->id;        }        $this->response['Options'] = $rows;        $this->response['Result'] = "OK";        return json_encode($this->response);    }    public function switch (Request $request)    {            session()->put('group_id', $request->id);            $request->session()                ->forget('survey');            return response()                ->json(['group_id' => session()                ->get('group_id') ]);    }    public function copy($group)    {        /*Copy Survey*/       // $survey = Survey::whereNull('group_id')->first();        $survey = Survey::where('id',36)->first();        $survey_copy = $survey->replicate();        $survey_copy->group_id = $group->id;        $survey_copy->slug = str_slug($group->name, '-') . '-' . str_slug($survey->title, '-') . '-' . time();        $survey_copy->save();        /*Copy survey questions*/		foreach ($survey->questions() as $question)		{			$copy_question = $question->replicate();			$copy_question->survey_id = $survey_copy->id;			$copy_question->save();			/*Copy survey question options*/			foreach ($question->options() as $option)			{				$copy_option = $option->replicate();				$copy_option->survey_id = $survey_copy->id;				$copy_option->survey_field_id = $copy_question->id;				if ($option->image)				{					$tmp = explode('.', $option->image);					$file_extension = end($tmp);					$image = $option->id . time() . '.' . $file_extension;					File::copy('public/assets/admin/images/survey/' . $option->image, 'public/assets/admin/images/survey/' . $image);					$copy_option->image = $image;				}				$copy_option->save();			}		}    }}