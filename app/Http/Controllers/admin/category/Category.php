<?phpnamespace App\Http\Controllers\admin\category;use Illuminate\Http\Request;use App\Http\Controllers\admin\Controller;use App\Category as CategoryModel;use DB, View, Validator, Route, Auth, File, Carbon\Carbon, Mail, URL, Excel, Session;class Category extends Controller{    public function __construct()    {        parent::__construct();    }    public function index()    {        return View::make('admin.category.index')->with('data', $this->data);    }    public function listing(Request $request)    {        if ($request->isMethod('post'))        {            $jtStartIndex = $_REQUEST['jtStartIndex'];            $jtPageSize = $_REQUEST['jtPageSize'];            $query = CategoryModel::where('group_id', $this->data['group_info']                ->id);            if (!empty($request->name))            {                $query->where('name', 'like', '%' . $request->name . '%');            }            $query->orderBy('display_order', 'ASC');            $data = $query->get();            $dataCount = $query->count();            $query->limit($jtPageSize)->offset($jtStartIndex);            $this->response['Result'] = "OK";            $this->response['TotalRecordCount'] = $dataCount;            $this->response['Records'] = $data;            return json_encode($this->response);        }    }    public function create(Request $request)    {        if ($request->isMethod('post'))        {            $attributes = array(                'name' => 'Name',                'name_ar' => 'Name (Arabic)',            );            $validator = Validator::make($request->all() , ['name' => 'bail|required|max:50|unique:category,name,null,null,group_id,' . $this->data['group_info']->id, 'name_ar' => 'bail|required', ], [], $attributes);            if ($validator->passes())            {                $display_order = DB::table('category')->max('display_order');                $category = new CategoryModel();                $category->name = $request->name;                $category->name_ar = $request->name_ar;                $category->active = $request->active;                $category->color = $request->color;                $category->group_id = $this->data['group_info']->id;                $category->display_order = ($display_order ? $display_order + 1 : 1);                $category->save();                $this->response['Result'] = "OK";                $this->response['Record'] = $category;                return json_encode($this->response);            }        }        $this->response['Result'] = "ERROR";        $this->response['Message'] = set_error_delimeter($validator->errors()            ->all());        return json_encode($this->response);    }    public function update(Request $request)    {        if ($request->isMethod('post'))        {            $attributes = array(                'name' => 'Name',                'name_ar' => 'Name (Arabic)',            );            $validator = Validator::make($request->all() , ['name' => 'bail|required|max:50|unique:category,name,' . $request->id . ',id,group_id,' . $this->data['group_info']->id, 'name_ar' => 'bail|required', ], [], $attributes);            if ($validator->passes())            {                $category = CategoryModel::where('id', $request->id)                    ->where('group_id', $this->data['group_info']                    ->id)                    ->first();                $category->name = $request->name;                $category->name_ar = $request->name_ar;                $category->active = $request->active;                $category->color = $request->color;                $category->save();                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }        $this->response['Result'] = "ERROR";        $this->response['Message'] = $validator->errors()            ->all();        return json_encode($this->response);    }    public function delete(Request $request)    {        if ($request->isMethod('post'))        {            $category = CategoryModel::where('id', $request->id)                ->where('group_id', $this->data['group_info']                ->id)                ->first();            if ($category->delete())            {                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }    }    public function sorting(Request $request)    {        if ($request->isMethod('post'))        {            $array = $request->arrayorder;            $count = 1;            foreach ($array as $idval)            {                CategoryModel::where('id', $idval)->where('group_id', $this->data['group_info']                    ->id)                    ->update(['display_order' => $count]);                $count++;            }        }        else        {            $this->data['categories'] = CategoryModel::where('group_id', $this->data['group_info']                ->id)                ->orderBy('display_order', 'ASC')                ->get();            return View::make('admin.category.sorting')                ->with('data', $this->data);        }    }    public function categories(Request $request)    {        $result = CategoryModel::where('group_id', $this->data['group_info']            ->id)            ->get();        $rows[] = array(            "DisplayText" => "",            "Value" => ""        );        foreach ($result as $key => $value)        {            $rows[$key + 1]['DisplayText'] = $value->name;            $rows[$key + 1]['Value'] = $value->id;        }        $this->response['Options'] = $rows;        $this->response['Result'] = "OK";        return json_encode($this->response);    }}