<?phpnamespace App\Http\Controllers\admin\session;use App\Employee;use App\Employee as EmployeeModel;use App\FriendAssessment;use App\Mail\Email;use App\Survey as SurveyModel;use App\SurveySubmission;use App\RaterEmailField;use Illuminate\Http\Request;use App\Http\Controllers\admin\Controller;use App\Session as SessionModel;use PHPExcel\Classes\PHPExcel;use DB, View, Validator, Route, Auth, File, Carbon\Carbon, Mail, URL, Excel, Session, PHPExcel_IOFactory,PHPExcel_Reader_Excel5,PHPExcel_Reader_CSV,PDF,PHPExcel_Writer_IWriter;class Sessions extends Controller{    public $successStatus = 200;    public function __construct()    {        parent::__construct();    }    public function index()    {        return View::make('admin.session.index')->with('data', $this->data);    }    public function listing(Request $request)    {        if ($request->isMethod('post'))        {            $jtStartIndex = $_REQUEST['jtStartIndex'];            $jtPageSize = $_REQUEST['jtPageSize'];            $query = DB::table('sessions');            if (!empty($request->name))            {                $query->where('name', 'like', '%' . $request->name . '%');            }            $query->where('group_id', $this->data['group_info']->id);            $query->orderBy('id', 'DESC');            $data = $query->get();            $dataCount = $query->count();            $query->limit($jtPageSize)->offset($jtStartIndex);            $this->response['Result'] = "OK";            $this->response['TotalRecordCount'] = $dataCount;            $this->response['Records'] = $data;            return json_encode($this->response);        }    }    public function create(Request $request)    {        if ($request->isMethod('post'))        {            $attributes = array(                'name' => 'Name',                'name_ar' => 'Name (Arabic)',            );            $validator = Validator::make($request->all() , ['name' => 'bail|required|max:50|unique:sessions,name' ], [], $attributes);            if ($validator->passes())            {                $session = new SessionModel();                $session->name = $request->name;                $session->group_id = session()->get('group_id');                $session->save();                if($request->hasFile('session_file')){                    $path = $request->file('session_file')->getRealPath();                    $data = Excel::load($path, function($reader) {})->get();                    if(!empty($data) && $data->count()){                        //for first row                        $count = 0;                        foreach ($data->toArray() as $key => $value) {                            if ($count > 0) {                                continue;                            }                            $this->data['employee'] = new Employee();                            $this->data['employee']->first_name = $value['name'];                            $this->data['employee']->last_name = '';                            $this->data['employee']->email = $value['email'];                            $this->data['employee']->code = time() . str_random(5);                            $this->data['employee']->p_status = 0;                            $this->data['employee']->group_id = session()->get('group_id');                            $this->data['employee']->session_id = $session->id;                            $this->data['employee']->save();                            $count++;                        }                        //for friends                        $count = 0;                        foreach ($data->toArray() as $key => $value) {                            if ($count == 0) {                                $count++;                                continue;                            }                            $this->data['friend'] = FriendAssessment::create([                                "name" => $value['name'],                                "email" => $value['email'],                                "session_id" => $session->id,                            ]);                            $count++;                        }                        $this->response['status'] = true;                        $this->response['message'] = 'Data inserted.';                        return json_encode($this->response);                    }                }                $this->response['Result'] = "OK";                $this->response['Record'] = $session;                return json_encode($this->response);            }        }        $this->response['Result'] = "ERROR";        $this->response['Message'] = set_error_delimeter($validator->errors()            ->all());        return json_encode($this->response);    }    public function update(Request $request)    {        if ($request->isMethod('post'))        {            $attributes = array(                'name' => 'Name',                'name_ar' => 'Name (Arabic)',            );            $validator = Validator::make($request->all() , ['name' => 'bail|required|max:50|unique:sessions,name,' . $request->id . ',id,group_id,' . $this->data['group_info']->id, 'name_ar' => 'bail|required', ], [], $attributes);            if ($validator->passes())            {                $session = SessionModel::where('id', $request->id)                    ->where('group_id', $this->data['group_info']                        ->id)                    ->first();                $session->name = $request->name;                $session->name_ar = $request->name_ar;                $session->active = $request->active;                $session->color = $request->color;                $session->save();                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }        $this->response['Result'] = "ERROR";        $this->response['Message'] = $validator->errors()            ->all();        return json_encode($this->response);    }    public function delete(Request $request)    {        if ($request->isMethod('post'))        {            if (DB::table('sessions')                ->where('id', $request->id)                ->delete())            {                Employee::where('session_id', $request->id)->delete();                FriendAssessment::where('session_id', $request->id)->delete();                $this->response['Result'] = "OK";                return json_encode($this->response);            }        }    }    public function sessions(Request $request)    {        $result = SessionModel::where('group_id', $this->data['group_info']            ->id)            ->get();        $rows[] = array(            "DisplayText" => "",            "Value" => ""        );        foreach ($result as $key => $value)        {            $rows[$key + 1]['DisplayText'] = $value->name;            $rows[$key + 1]['Value'] = $value->id;        }        $this->response['Options'] = $rows;        $this->response['Result'] = "OK";        return json_encode($this->response);    }    //insert new session and employee along employee friends    public function session_file_upload(Request $request)    {        if ($request->isMethod('post')) {            $attributes = array(                'name' => 'Name',            );            $validator = Validator::make($request->all(), ['name' => 'bail|required|max:50|unique:sessions,name'], [], $attributes);            /*$allowed = array('text/x-comma-separated-values', 'text/comma-separated-values', 'application/octet-stream', 'application/vnd.ms-excel', 'application/x-csv', 'text/x-csv', 'text/csv', 'application/csv', 'application/excel', 'application/vnd.msexcel');            $filename = $_FILES['session_file']['name'];            $ext = pathinfo($filename, PATHINFO_EXTENSION);            if (!in_array($ext, $allowed)) {                $this->response['status'] = false;                $this->response['message'] = 'Please upload excel or csv file only.';                return json_encode($this->response);            }*/            if ($_FILES['session_file']['size'] == 0) {                $this->response['status'] = false;                $this->response['message'] = 'Please upload file only.';                return json_encode($this->response);            }            if ($validator->passes()&& $_FILES['session_file']['size'] != 0) {                /*$session = new SessionModel();                $session->name = $request->name;                $session->email_sent = 0;                $session->save();                $session_id = $session->id;*/                $session_id = DB::table('sessions')->insertGetId(                    ['name' => $request->name, 'group_id' => session()->get('group_id'), 'email_sent' => 0]                );                if ($request->hasFile('session_file')) {                    $path = $request->file('session_file')->getRealPath();                    $inputFileType = PHPExcel_IOFactory::identify($path);                    $objReader = PHPExcel_IOFactory::createReader($inputFileType);                    $objReader->setLoadAllSheets();                    $objPHPExcel = $objReader->load($path);                    $loadedSheetNames = $objPHPExcel->getSheetNames();                    $sheet_array = [];                    foreach ($loadedSheetNames as $sheetIndex => $loadedSheetName) {                        $sheet_name = $loadedSheetName;                        $sheet_array['sheet_name'][] = $sheet_name;                        $sheet_data = $objPHPExcel->getSheet($sheetIndex)->toArray();                        $employee_id = '';                        $i = 0;                        $total_friend = count($sheet_data);                        foreach ($sheet_data as $row => $column) {                            if ($i == 1) {                                if (empty($column[0]) || empty($column[1]) || empty($column[2])) {                                    continue;                                }                                $first_name = $column[0];                                $last_name = $column[1];                                $email = $column[2];                                $this->data['employee'] = new Employee();                                $this->data['employee']->first_name = $first_name;                                $this->data['employee']->last_name = $last_name;                                $this->data['employee']->email = $email;                                $this->data['employee']->code = time() . str_random(5);                                $this->data['employee']->p_status = 0;                                $this->data['employee']->group_id = session()->get('group_id');                                $this->data['employee']->session_id = $session_id;                                $this->data['employee']->save();                                $employee_id = $this->data['employee']->id;                            } elseif ($i > 1) {                                if (empty($column[0]) || empty($column[1]) || empty($column[2])) {                                    continue;                                }                                $user_first_name = $column[0];                                $user_last_name = $column[1];                                $user_email = $column[2];                                $FriendAssessment = FriendAssessment::create([                                    "name" => $user_first_name,                                    "last_name" => $user_last_name,                                    "email" => $user_email,                                    "session_id" => $session_id,                                    "employee_id" => $employee_id                                ]);                            }                            $i++;                        }                        // updating last inserted friend as last_friend as per the imported sheet                        if (isset($FriendAssessment->id) && $FriendAssessment->id > 0) {                            FriendAssessment::where('id', $FriendAssessment->id)->update(['last_friend' => 1]);                        }                    }                    session()->put('message','New session created.');                    $this->response['status'] = true;                    $this->response['message'] = 'New session created.';                    return json_encode($this->response);                }            } else {                $this->response['status'] = false;                $this->response['message'] = 'Something went wrong.';                return json_encode($this->response);            }        }    }    public function survey(Request $request) {        if (isset($request->id)) {            $session_id = $request->id;        } elseif (isset($request->session_id)) {            $session_id = $request->session_id;        }        $this->data['session_data'] = SessionModel::where('id', $session_id)->first();        //var_dump($this->data['session_data']->email_sent);die;        $this->data['survey'] = SurveyModel::where('group_id', $this->data['group_info']->id)->first();        if ($this->data['survey']) {            $this->data['questions'] = $this->data['survey']->questions();            if (isset($request->employee_id)) {                //DB::connection()->enableQueryLog();                $query = SurveySubmission::leftJoin('employee', function ($join) {                    $join->on('employee.id', '=', 'survey_submission.employee_id');                });                if(isset($request->employee_id))                    $query->where('survey_submission.employee_id', $request->employee_id)->whereNotNull('employee_friend_id');                $query->orderBy('survey_submission.employee_friend_id','ASC');                $query->select('employee.*', 'survey_submission.*', DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.employee_id=survey_submission.employee_id AND friend_assessment.id = survey_submission.employee_friend_id AND friend_assessment.is_submit = 1) as total_friend_submissions"), DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.employee_id=survey_submission.employee_id) as total_friends"));                $this->data['submissions'] = $query->paginate(25);                if(isset($this->data['route-paramters']['parent_assessment_id'])) {                    $this->data['employee_info'] = SurveySubmission::join('employee', function ($join) {                        $join->on('employee.id', '=', 'survey_submission.employee_id');                    })                        ->where('survey_submission.id', $this->data['route-paramters']['parent_assessment_id'])                        ->select('employee.*')                        ->first();                }                //$queries = DB::getQueryLog();                //dd($queries);            }else {                $query = SessionModel::session_survey($session_id);                $this->data['submissions'] = $query->paginate(25);            }        }        return View::make('admin.session.survey.submissions')            ->with('data', $this->data);    }    public function send_avg_email(Request $request){        $group_id = $request->group_id;        $emp_id = $request->survey_id;        $employee_id = $request->employee_id;        $parent_assessment_id = $request->parent_assessment_id;        $friend_assessment_score['behavior'] =  '';        $friend_assessment_score['behavior'] =  '';        $friend_assessment_sub_quadrant['sub_quadrant'] =  '';        $query_new_check = SurveySubmission::where('survey_submission.group_id', $group_id);        $query_new_check->where('p_status', 1);        $employee_result_check = $query_new_check->Where('employee_id', $employee_id)->whereNull('employee_friend_id')            ->first();        if ($employee_result_check) {            /*result friends except last friend*/            $other_friends_query = SurveySubmission::join('friend_assessment', function ($join) {                $join->on('friend_assessment.id', '=', 'survey_submission.employee_friend_id')                    ->where('friend_assessment.last_friend', 0);            });            $other_friends_query->where('survey_submission.group_id', 1);            $other_friends_query->where('survey_submission.employee_id', $employee_id);            $other_friends_query->whereNotNull('survey_submission.employee_friend_id');            $other_friends_result = $other_friends_query->select(DB::raw("ROUND(AVG(b)) as b"), DB::raw("ROUND(AVG(a)) as a"), DB::raw("ROUND(AVG(l)) as l"), DB::raw("ROUND(AVG(r)) as r"))->first();            $other_friends_h_value = $other_friends_v_value = 0;            if ($other_friends_result) {                $h_value = $other_friends_result->r - $other_friends_result->l;                $v_value = $other_friends_result->a - $other_friends_result->b;            }            /*old query*//*            $query = SurveySubmission::leftJoin('employee', function ($join) {                $join->on('employee.id', '=', 'survey_submission.employee_id');            });            $query->where('survey_submission.group_id', 1);            $query->where('employee_id', $employee_id);            $query->whereNotNull('employee_friend_id');*/            $query = SurveySubmission::join('friend_assessment', function ($join) {                $join->on('friend_assessment.id', '=', 'survey_submission.employee_friend_id');            });            $query->where('survey_submission.group_id', 1);            $query->where('survey_submission.employee_id', $employee_id);            $query->whereNotNull('survey_submission.employee_friend_id');            $results = $query->select(DB::raw("ROUND(AVG(b)) as b"), DB::raw("ROUND(AVG(a)) as a"), DB::raw("ROUND(AVG(l)) as l"), DB::raw("ROUND(AVG(r)) as r"))->first();            /*END old query*/            //var_dump($other_friends_h_value,$other_friends_v_value);            if ($results) {                $other_friends_h_value = $results->r - $results->l;                $other_friends_v_value = $results->a - $results->b;                if ($h_value == 0) {                    $h_value = $other_friends_h_value;                }                if ($v_value == 0) {                    $v_value = $other_friends_v_value;                }                if($h_value == 5 || $h_value == 0) $h_value = $h_value - 1; else if($h_value == -5) $h_value = $h_value + 1;                if($v_value == 5 || $v_value == 0) $v_value = $v_value - 1; else if($v_value == -5) $v_value = $v_value + 1;                                $h_value = ($h_value < 0 ? $h_value: '+'.$h_value);                $v_value = ($v_value < 0 ? $v_value: '+'.$v_value);                $h_sign = (str_contains($h_value, '-') ? '-' : '+');                $v_sign = (str_contains($v_value, '-') ? '-' : '+');                /*if ($h_value == '-5') {                    $h_value = '-4';                }                if ($h_value == '+5') {                    $h_value = '+4';                }                if ($h_value == '+0') {                    $h_value = '+1';                }                if ($h_value == '-0') {                    $h_value = '-1';                }*/                $friend_assessment_score['behavior'] = DB::table('score')->where('h', $h_sign)->where('v', $v_sign)->first();                $friend_assessment_sub_quadrant['sub_quadrant'] = DB::table('friend_sub_quadrant')                    ->where('h', 'like', '%' . $h_value . '%')                    ->where('v', 'like', '%' . $v_value . '%')                    ->first();            }            //var_dump($friend_assessment_score['behavior'],$friend_assessment_sub_quadrant['sub_quadrant']);die;            $this->data['friend_assessment_record'] = $friend_assessment_score['behavior'];            $this->data['friend_assessment_sub_quadrant'] = $friend_assessment_sub_quadrant['sub_quadrant'];            //var_dump($this->data['friend_assessment_sub_quadrant'],$this->data['friend_assessment_record']);die;            //DB::connection()->enableQueryLog();            $this->data['submission'] = SurveySubmission::leftJoin('employee', function ($join) {                $join->on('employee.id', '=', 'survey_submission.employee_id');            })                ->where('survey_submission.employee_id', $employee_id)->whereNull('survey_submission.employee_friend_id')                ->select('employee.*', 'survey_submission.*')->first();            //$queries = DB::getQueryLog();            //var_dump($queries,$employee_id);die;            $this->file_name = str_slug($this->data['submission']->first_name, '-').'-'.str_slug($this->data['submission']->last_name, '-');            $query_new = SurveySubmission::where('survey_submission.group_id', $group_id);            $query_new->where('p_status', 1);            $employee_result = $query_new->Where('employee_id', $employee_id)->whereNull('employee_friend_id')                ->first();            //$queries = DB::getQueryLog();            $h_value = $employee_result['r']-$employee_result['l'];            $v_value = $employee_result['a']-$employee_result['b'];            if($h_value == 5 || $h_value == 0) $h_value = $h_value - 1; else if($h_value == -5) $h_value = $h_value + 1;            if($v_value == 5 || $v_value == 0) $v_value = $v_value - 1; else if($v_value == -5) $v_value = $v_value + 1;            $h_value = ($h_value < 0 ? $h_value: '+'.$h_value);            $v_value = ($v_value < 0 ? $v_value: '+'.$v_value);            $h_sign = (str_contains($h_value, '-') ? '-' : '+');            $v_sign = (str_contains($v_value, '-') ? '-' : '+');            $this->data['record'] = DB::table('score')->where('h', $h_sign)->where('v', $v_sign)->first();            $this->data['sub_quadrant'] = DB::table('sub_quadrant')                ->where('h', 'like', '%' . $h_value . '%')                ->where('v', 'like', '%' . $v_value . '%')                ->first();            //var_dump($this->data['sub_quadrant']);die;            $this->data['rater_email_fields'] = RaterEmailField::first();            // echo View::make('catalog.survey.avg')->with('data', $this->data)->render();die;            PDF::loadView('catalog.survey.avg', ['data' => $this->data])->save('public/assets/admin/file/Assessment-Result-('.$this->file_name.').pdf', 'overwrite');            $data['subject'] = "Assessment Result | " . config('app.name');            $data['view'] = 'emails.employee-invitation';            $content = "<p>Hi ".$this->data['submission']->first_name.",</p><p></p>";            $content .= "<p>Attached please find your completed multi-rater Communication Styles assessment. This document contains both your self-assessment and the aggregated results of the peers you selected.</p><p></p>";            $content .= "<p>We hope you find great insight into understanding your own Style (self-assessment) and the perception of others (rater-assessment). Generally, you may want to search for themes that can help you make adjustments to your style, to better communicate with others!</p><p></p>";            $content .= "<p>Have fun with the results!!</p>";            $content .= "<p>Sincerely,</p>";            $content .= "<p>Jim Glantz, President of The Academy For Leadership And Training</p><p></p>";            $content .= "<p><strong>Note:</strong> If you have any questions, please feel free to contact us at admin@taflat.com. Thank you!</p>";            $data['content'] = $content;            $data['attachment'] = ['public/assets/admin/file/Assessment-Result-('.$this->file_name.').pdf'];            //var_dump($data);die;            //Mail::to([$this->data['employee']->email])->cc([config("setting.cc_email")])->send(new Email($this->data));            $send_email = Mail::to($this->data['submission']->email)->send(new Email($data));            //$send_email = Mail::to('ahmed@astutesol.com')->send(new Email($data));            if (Mail::failures()) {                session()->put('avg_message','Something went wrong.');                $this->response['message'] = "Something went wrong.";                $this->response['result'] = False;                return json_encode($this->response);            } else {                $record = Employee::where('id', $employee_id)->first();                $record->is_email = 0;                $record->save();                session()->put('avg_message','Aggregate email sent to user.');                $this->response['message'] = "Aggregate email sent to user.";                $this->response['result'] = "OK";                return json_encode($this->response);            }        } else {            session()->put('avg_message',"user hasn't taken his own survey, so we can't send aggregate email.");            $this->response['message'] = "user hasn't taken his own survey, so we can't send aggregate email.";            $this->response['result'] = "OK";            return json_encode($this->response);        }    }    public function invitation_email(Request $request){        if (isset($request->session_id)) {            $session_id = $request->session_id;        }        $employees = Employee::where('session_id', $session_id)->get();        $email_send_to_user = false;        $email_send_to_friend = false;        foreach ($employees as $employee_detail) {            $employee_id = $employee_detail->id;            $survey = SurveySubmission::where('employee_id', $employee_id)->where('employee_friend_id', NULL)->first();            if (!$survey && isset($employee_detail->email) && !empty($employee_detail->email)) {                $link_for_assessment = route('catalog-survey-employee-assessment-form', [$employee_id, $session_id]);                $this->data['view'] = 'emails.employee-invitation';                $this->data['subject'] = "Communication Assessment From The Academy For Leadership And Training";                $content = "<p>Hi ".$employee_detail->first_name." ".$employee_detail->last_name.",</p>";                $content .= "<p>Welcome to The Academy For Leadership And Training's Communication Assessment 360. Please complete your self-assessment at your earliest convenience. As you complete your assessment, please answer the questions as you are at work (versus at home or socially).</p>";                $content .= "<p>Your Communication Assessment raters will receive their links shortly. Once those raters have completed your assessment, you will receive your final Assessment document, which will include your self-assessment and the raters' assessment of your Communication Style.</p>";                $content .= "<p>We hope you enjoy this process and use the opportunity to learn about yourself!</p>";                $content .= "<p>-Jim Glantz</p>";                $content .= "<p>President, The Academy For Leadership And Training</p>";                $content .= "<br>";                $content .= "<a href='".$link_for_assessment."'>Click here to start Assessment</a>";                $this->data['content'] = $content;                $email_send_to_user = true;                Mail::to($employee_detail->email)->send(new Email($this->data));            }            foreach(employee_all_friends($employee_id) as $row) {                if($row->is_submit == 0 && isset($row->email) && !empty($row->email)){                    $link_for_assessment = route('catalog-survey-employee-friend-assessment-form', [$row->id, $session_id]);                    $this->data['view'] = 'emails.reminder';                    $this->data['subject'] = "Communication Assessment From The Academy For Leadership And Training";                    $content = "<p>Hi ".$row->name." ".$row->last_name.",</p>";                    $content .= "<p>Thank you for taking the time to complete the Communication Assessment for ".$employee_detail->first_name." ".$employee_detail->last_name.". As you complete this assessment, please answer the question on the style of ".$employee_detail->first_name." at work (versus at home or in a personal setting).</p>";                    $content .= "<p>The assessment should take approximately 3-4 minutes to complete.</p>";                    $content .= "<p>Thank you very much!</p>";                    $content .= "<p>-Jim Glantz</p>";                    $content .= "<p>President, The Academy For Leadership And Training</p>";                    $content .= "<br>";                    $content .= "<a href='".$link_for_assessment."'>Click here to start Assessment</a>";                    $this->data['content'] = $content;                    $email_send_to_friend = true;                    Mail::to($row->email)->send(new Email($this->data));                }            }        }        if ($email_send_to_friend || $email_send_to_user) {            DB::table('sessions')                ->where('id', $session_id)                ->update(['email_sent' => 1]);            session()->put('main_user_message','Invitation email sent to users.');            $this->response['message'] = "Invitation email sent to users";        } else {            $this->response['message'] = "";        }        $this->response['result'] = "OK";        return json_encode($this->response);    }    public function session_reminder_email(Request $request){        $session_id = '';        if (isset($request->session_id)) {            $session_id = $request->session_id;        }        //var_dump($session_id,$request->session_id);die;        $employees = Employee::where('session_id', $session_id)->get();        $email_send_to_user = false;        $email_send_to_friend = false;        foreach ($employees as $employee_detail) {            $employee_id = $employee_detail->id;            $survey = SurveySubmission::where('employee_id', $employee_id)->where('employee_friend_id', NULL)->first();            if (!$survey && isset($employee_detail->email) && !empty($employee_detail->email)) {                $link_for_assessment = route('catalog-survey-employee-assessment-form', [$employee_id,$session_id]);                //var_dump($link_for_assessment);die;                $this->data['view'] = 'emails.employee-invitation';                $this->data['subject'] = "Reminder | Communication Assessment From The Academy For Leadership And Training";                $content = "<p>Hi ".$employee_detail->first_name." ".$employee_detail->last_name.",</p>";                $content .= "<p>Welcome to The Academy For Leadership And Training's Communication Assessment 360. Please complete your self-assessment at your earliest convenience. As you complete your assessment, please answer the questions as you are at work (versus at home or socially).</p>";                $content .= "<p>Your Communication Assessment raters will receive their links shortly. Once those raters have completed your assessment, you will receive your final Assessment document, which will include your self-assessment and the raters' assessment of your Communication Style.</p>";                $content .= "<p>We hope you enjoy this process and use the opportunity to learn about yourself!</p>";                $content .= "<p>-Jim Glantz</p>";                $content .= "<p>President, The Academy For Leadership And Training</p>";                $content .= "<br>";                $content .= "<a href='".$link_for_assessment."'>Click here to start Assessment</a>";                $this->data['content'] = $content;                $email_send_to_user = true;                Mail::to($employee_detail->email)->send(new Email($this->data));            }            foreach(employee_all_friends($employee_id) as $row) {                if($row->is_submit == 0 && isset($row->email) && !empty($row->email)){                    $link_for_assessment = route('catalog-survey-employee-friend-assessment-form', [$row->id, $session_id]);                    $this->data['view'] = 'emails.reminder';                    $this->data['subject'] = "Reminder | Communication Assessment From The Academy For Leadership And Training";                    $content = "<p>Hi ".$row->name." ".$row->last_name.",</p>";                    $content .= "<p>Thank you for taking the time to complete the Communication Assessment for ".$employee_detail->first_name." ".$employee_detail->last_name.". As you complete this assessment, please answer the question on the style of ".$employee_detail->first_name." at work (versus at home or in a personal setting).</p>";                    $content .= "<p>The assessment should take approximately 3-4 minutes to complete.</p>";                    $content .= "<p>Thank you very much!</p>";                    $content .= "<p>-Jim Glantz</p>";                    $content .= "<p>President, The Academy For Leadership And Training</p>";                    $content .= "<br>";                    $content .= "<a href='".$link_for_assessment."'>Click here to start Assessment</a>";                    $this->data['content'] = $content;                    Mail::to([$row->email])->send(new Email($this->data));                    $email_send_to_friend = true;                }            }        }        if ($email_send_to_friend || $email_send_to_user) {            session()->put('main_user_message','Reminder email sent to users.');            $this->response['message'] = "Reminder email sent to users";        } else {            session()->put('main_user_message','All members are completed their survey.');            $this->response['message'] = "All members are completed their survey.";        }        $this->response['result'] = "OK";        return json_encode($this->response);    }    public function file_export(Request $request)    {        if (isset($request->session_id)) {            $session_id = $request->session_id;        }        $session_data = SessionModel::where('id', $session_id)->first();        $this->data['survey'] = SurveyModel::where('group_id', $this->data['group_info']->id)->first();        if ($this->data['survey']) {            $this->data['questions'] = $this->data['survey']->questions();            $query = SurveySubmission::join('employee', function ($join) {                $join->on('employee.id', '=', 'survey_submission.employee_id');            });            /* ->where('survey_submission.survey_id', $this->data['survey']            ->id) */            $query->where('survey_submission.session_id', $session_id)                ->whereNull('survey_submission.employee_friend_id');            $query->groupBy('survey_submission.employee_id');            $query->select('employee.*', 'survey_submission.*', DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.employee_id=survey_submission.employee_id AND friend_assessment.is_submit = 1) as total_friend_submissions"), DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.employee_id=employee.id) as total_friends"));            $this->data['submissions'] = $query->get();        }        $group_name = str_replace(' ','-',$this->data['group_info']->name);        $excel_sheet = array();        $excel_sheet_array = array();        foreach ($this->data['submissions'] as $key => $submission) {            $excel_sheet[$key] = $submission;            $excel_sheet_array[$key]['date'] = date('M d, Y',strtotime($submission->created_at));            $excel_sheet_array[$key]['name'] = $submission->first_name.' '.$submission->last_name;            $excel_sheet_array[$key]['email'] = $submission->email;            $excel_sheet_array[$key]['-b + a'] = '- '.$submission->b.' + '.$submission->a.' = '.((- $submission->b) + $submission->a);            $excel_sheet_array[$key]['-l + r'] = '- '.$submission->l.' + '.$submission->r.' = '.((- $submission->l) + $submission->r);            $excel_sheet_array[$key]['style'] = 'Pri: '.ucfirst($submission->behavior) . ' | Sec: '.strtoupper($submission->sub_behavior);            $excel_sheet_array[$key]['behavior'] = $submission->behavior;            //DB::connection()->enableQueryLog();            //$queries = DB::getQueryLog();            $query = SurveySubmission::where('survey_submission.group_id', 1);            $query->where('employee_id', $submission->employee_id);            $query->whereNotNull('employee_friend_id');            $results = $query->select(DB::raw("ROUND(AVG(b)) as b"), DB::raw("ROUND(AVG(a)) as a"), DB::raw("ROUND(AVG(l)) as l"), DB::raw("ROUND(AVG(r)) as r"))->first();            $friend_assessment_record = [$key];            $friend_assessment_record['-b + a'] = '';            $friend_assessment_record['-l + r'] = '';            $friend_assessment_record['style'] = '';            $friend_assessment_record['behavior'] = '';            if (isset($results->r) && $results->r != NULL) {                $h_value = $results->r-$results->l;                $v_value = $results->a-$results->b;                if($h_value == 5 || $h_value == 0) $h_value = $h_value - 1; else if($h_value == -5) $h_value = $h_value + 1;                if($v_value == 5 || $v_value == 0) $v_value = $v_value - 1; else if($v_value == -5) $v_value = $v_value + 1;                $h_value = ($h_value < 0 ? $h_value: '+'.$h_value);                $v_value = ($v_value < 0 ? $v_value: '+'.$v_value);                $h_sign = (str_contains($h_value, '-') ? '-' : '+');                $v_sign = (str_contains($v_value, '-') ? '-' : '+');                $friend_assessment_score = DB::table('score')->where('h', $h_sign)->where('v', $v_sign)->first();                $friend_assessment_sub_quadrant = DB::table('friend_sub_quadrant')                    ->where('h', 'like', '%' . $h_value . '%')                    ->where('v', 'like', '%' . $v_value . '%')                    ->first();//var_dump($friend_assessment_score);                $friend_assessment_record['-b + a'] = '- '.$results->b.' + '.$results->a.' = '.((- $results->b) + $results->a);                $friend_assessment_record['-l + r'] = '- '.$results->l.' + '.$results->r.' = '.((- $results->l) + $results->r);                $friend_assessment_record['style'] = 'Pri: '.ucfirst($friend_assessment_score->behavior) . ' | Sec: '.strtoupper($friend_assessment_sub_quadrant->behavior);                $friend_assessment_record['behavior'] = $friend_assessment_score->behavior;            }            $excel_sheet_array[$key]['friend']['-b + a'] = $friend_assessment_record['-b + a'];            $excel_sheet_array[$key]['friend']['-l + r'] = $friend_assessment_record['-l + r'];            $excel_sheet_array[$key]['friend']['style'] = $friend_assessment_record['style'];            $excel_sheet_array[$key]['friend']['behavior'] = $friend_assessment_record['behavior'];        }//die;        if (sizeof($this->data['submissions']) > 0) {            //var_dump(sizeof($this->data['submissions']),$this->data['submissions'],'ahmed testing empty file when no survey take, so please wait a minute.');die;            return Excel::create($session_data->name.'-submissions', function ($excel) use ($excel_sheet_array) {                $excel->sheet('survey-submissions', function ($sheet) use ($excel_sheet_array) {                    // bold the column headers                    $sheet->cell('A1:D1', function ($cells) {                        $cells->setFontWeight('bold');                        $cells->setAlignment('center');                        $cells->setBackground('#f6d8ac');                    });                    $i=2;                    //$sheet->row(1, ['Date', 'Name', 'Email', '-b + a', '-l + r', 'Style']);                    $sheet->row(1, ['', 'Name', 'Email', '']);                    foreach($excel_sheet_array as $excel_sheet){                        $sheet->row($i, ['', $excel_sheet['name'], $excel_sheet['email'],'']);                        $i++;                        $sheet->row($i, ['', 'Below/Above', 'Left/Right','']);                        $i++;                        $col='D'.$i.':D'.$i;                        $color_code='#fff';                        if(strtolower($excel_sheet['behavior'])=='analytical'){                            $color_code = '#64b5e0';                        }elseif(strtolower($excel_sheet['behavior'])=='driver'){                            $color_code = '#9de258';                        }elseif(strtolower($excel_sheet['behavior'])=='amiable'){                            $color_code = '#ffc172';                        }elseif(strtolower($excel_sheet['behavior'])=='expressive'){                            $color_code = '#ffe160';                        }                        $sheet->cell($col, function ($cell) use ($color_code) {                            $cell->setBackground($color_code);                        });                        //Employee result                        $sheet->row($i, ['Self Assessment', $excel_sheet['-b + a'], $excel_sheet['-l + r'], $excel_sheet['style']]);                        $i++;                        if ($excel_sheet['friend']['-l + r']) {                            $col='D'.$i.':D'.$i;                            $color_code='';                            if(strtolower($excel_sheet['friend']['behavior'])=='analytical'){                                $color_code = '#64b5e0';                            }elseif(strtolower($excel_sheet['friend']['behavior'])=='driver'){                                $color_code = '#9de258';                            }elseif(strtolower($excel_sheet['friend']['behavior'])=='amiable'){                                $color_code = '#ffc172';                            }elseif(strtolower($excel_sheet['friend']['behavior'])=='expressive'){                                $color_code = '#ffe160';                            }                            $sheet->cell($col, function ($cell) use ($color_code) {                                $cell->setBackground($color_code);                            });                        }                        //Employee Friend result                        $sheet->row($i, ['Aggregate Result',$excel_sheet['friend']["-b + a"], $excel_sheet['friend']['-l + r'], $excel_sheet['friend']['style']]);                        $i++;                    }                });            })                ->export('xlsx');        } else {            return Excel::create($session_data->name.'-submissions', function ($excel) use ($excel_sheet_array) {                $excel->sheet('survey-submissions', function ($sheet) use ($excel_sheet_array) {                    // bold the column headers                    $sheet->cell('A1:C1', function ($cells) {                        $cells->setFontWeight('bold');                        $cells->setAlignment('center');                        $cells->setBackground('#f6d8ac');                    });                    $i=2;                    //$sheet->row(1, ['Date', 'Name', 'Email', '-b + a', '-l + r', 'Style']);                    $sheet->row(1, ['Date', 'Name', 'Email']);                    $sheet->row($i, ['', 'No survey found against users yet. Please take survey first.', '']);                });            })                ->export('xlsx');        }    }    public function session_file_export(Request $request)    {        if (isset($request->session_id)) {            $session_id = $request->session_id;        }        $session_data = SessionModel::where('id', $session_id)->first();        $this->data['survey'] = SurveyModel::where('group_id', $this->data['group_info']->id)->first();        if ($this->data['survey']) {            $this->data['questions'] = $this->data['survey']->questions();            $query = SurveySubmission::join('employee', function ($join) {                $join->on('employee.id', '=', 'survey_submission.employee_id');            });            /* ->where('survey_submission.survey_id', $this->data['survey']            ->id) */            $query->where('survey_submission.session_id', $session_id);            $query->groupBy('survey_submission.employee_id');            $query->select('employee.*', 'survey_submission.*', DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.employee_id=survey_submission.employee_id AND friend_assessment.is_submit = 1) as total_friend_submissions"), DB::raw("(SELECT COUNT(*) from friend_assessment WHERE friend_assessment.employee_id=employee.id) as total_friends"));            $this->data['submissions'] = $query->get();        }        $group_name = str_replace(' ','-',$this->data['group_info']->name);        $excel_sheet = array();        $excel_sheet_array = array();        foreach ($this->data['submissions'] as $key => $submission) {            $excel_sheet[$key] = $submission;            $excel_sheet_array[$key]['date'] = date('M d, Y',strtotime($submission->created_at));            $excel_sheet_array[$key]['name'] = $submission->first_name.' '.$submission->last_name;            $excel_sheet_array[$key]['email'] = $submission->email;            $excel_sheet_array[$key]['-b + a'] = '- '.$submission->b.' + '.$submission->a.' = '.((- $submission->b) + $submission->a);            $excel_sheet_array[$key]['-l + r'] = '- '.$submission->l.' + '.$submission->r.' = '.((- $submission->l) + $submission->r);            $excel_sheet_array[$key]['style'] = 'Pri: '.ucfirst($submission->behavior) . ' | Sec: '.strtoupper($submission->sub_behavior);            $excel_sheet_array[$key]['behavior'] = $submission->behavior;        }        //$objReader = PHPExcel_IOFactory::createReader($inputFileType);        $objPHPExcel = new PHPExcel();        /* Create a first sheet, representing sales data*/        foreach($excel_sheet_array as $key => $excel_sheet){            $objPHPExcel->setActiveSheetIndex($key);            $objPHPExcel->getActiveSheet()->setCellValue('A1', 'Date');            $objPHPExcel->getActiveSheet()->setCellValue('B1', 'Name');            $objPHPExcel->getActiveSheet()->setCellValue('C1', 'Email');            $i=2;            $objPHPExcel->getActiveSheet()->setCellValue("A$i",$excel_sheet['date']);            $objPHPExcel->getActiveSheet()->setCellValue("B$i",$excel_sheet['name']);            $objPHPExcel->getActiveSheet()->setCellValue("B$i",$excel_sheet['email']);            $i++;            $objPHPExcel->getActiveSheet()->setCellValue("A$i",$excel_sheet['-b + a']);            $objPHPExcel->getActiveSheet()->setCellValue("B$i",$excel_sheet['-l + r']);            $objPHPExcel->getActiveSheet()->setCellValue("B$i",$excel_sheet['style']);            $objPHPExcel->getActiveSheet()->setTitle($excel_sheet['name']);        }        header('Content-Type: application/vnd.ms-excel');        header('Content-Disposition: attachment;filename="name_of_file.xls"');        header('Cache-Control: max-age=0');        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');        $objWriter->save('php://output');    }    public function result(Request $request) {        $this->data['submission'] = SurveySubmission::join('employee', function ($join) {            $join->on('employee.id', '=', 'survey_submission.employee_id');        })            ->where('survey_submission.id', $request->id)            ->where('survey_submission.group_id', 1)            ->select('employee.*', 'survey_submission.*')            ->first();        $this->response['records'] = View::make('admin.survey.ajax.result')            ->with('data', $this->data)->render();        return json_encode($this->response);    }    public function aggregate_result(Request $request) {        //var_dump($request->id);die;        $query = SurveySubmission::where('survey_submission.group_id', 1);        $query->where('employee_id', $request->id);        $query->whereNotNull('employee_friend_id');        $result = $query->select(DB::raw("ROUND(AVG(b)) as b"), DB::raw("ROUND(AVG(a)) as a"), DB::raw("ROUND(AVG(l)) as l"), DB::raw("ROUND(AVG(r)) as r"))->first();        /*Fetch Quardinates*/        $h_value = $result['r']-$result['l'];        $v_value = $result['a']-$result['b'];        if($h_value == 5 || $h_value == 0) $h_value = $h_value - 1; else if($h_value == -5) $h_value = $h_value + 1;        if($v_value == 5 || $v_value == 0) $v_value = $v_value - 1; else if($v_value == -5) $v_value = $v_value + 1;        $h_value = ($h_value < 0 ? $h_value: '+'.$h_value);        $v_value = ($v_value < 0 ? $v_value: '+'.$v_value);        $h_sign = (str_contains($h_value, '-') ? '-' : '+');        $v_sign = (str_contains($v_value, '-') ? '-' : '+');        $this->data['record'] = DB::table('score')->where('h', $h_sign)->where('v', $v_sign)->first();        $this->data['sub_quadrant'] = DB::table('friend_sub_quadrant')            ->where('h', 'like', '%' . $h_value . '%')            ->where('v', 'like', '%' . $v_value . '%')            ->first();        $this->response['behavior'] = URL::to('/').'/public/assets/admin/images/survey/'.strtolower($this->data['record']->behavior).'.png';        $this->response['sub_behavior'] = URL::to('/').'/public/assets/admin/images/survey/'.strtolower($this->data['record']->behavior).'_'.strtolower($this->data['sub_quadrant']->behavior).'.png';        return json_encode($this->response);    }    public function generate_survey_avg_pdf(Request $request){        try {            $group_id = $request->group_id;            $emp_id = $request->survey_id;            $employee_id = $request->employee_id;            $parent_assessment_id = $request->parent_assessment_id;            $friend_assessment_score['behavior'] =  '';            $friend_assessment_sub_quadrant['sub_quadrant'] =  '';            $query_new_check = SurveySubmission::where('survey_submission.group_id', $group_id);            $query_new_check->where('p_status', 1);            $employee_result_check = $query_new_check->Where('employee_id', $employee_id)->whereNull('employee_friend_id')                ->first();            if ($employee_result_check) {                /*result friends except last friend*/                $other_friends_query = SurveySubmission::join('friend_assessment', function ($join) {                    $join->on('friend_assessment.id', '=', 'survey_submission.employee_friend_id')                        ->where('friend_assessment.last_friend', 0);                });                $other_friends_query->where('survey_submission.group_id', 1);                $other_friends_query->where('survey_submission.employee_id', $employee_id);                $other_friends_query->whereNotNull('survey_submission.employee_friend_id');                $other_friends_result = $other_friends_query->select(DB::raw("ROUND(AVG(b)) as b"), DB::raw("ROUND(AVG(a)) as a"), DB::raw("ROUND(AVG(l)) as l"), DB::raw("ROUND(AVG(r)) as r"))->first();                $other_friends_h_value = $other_friends_v_value = 0;                if ($other_friends_result) {                    $h_value = $other_friends_result->r - $other_friends_result->l;                    $v_value = $other_friends_result->a - $other_friends_result->b;                }                /*old query*/                /*            $query = SurveySubmission::leftJoin('employee', function ($join) {                                $join->on('employee.id', '=', 'survey_submission.employee_id');                            });                            $query->where('survey_submission.group_id', 1);                            $query->where('employee_id', $employee_id);                            $query->whereNotNull('employee_friend_id');                */                $query = SurveySubmission::join('friend_assessment', function ($join) {                    $join->on('friend_assessment.id', '=', 'survey_submission.employee_friend_id');                });                $query->where('survey_submission.group_id', 1);                $query->where('survey_submission.employee_id', $employee_id);                $query->whereNotNull('survey_submission.employee_friend_id');                $results = $query->select(DB::raw("ROUND(AVG(b)) as b"), DB::raw("ROUND(AVG(a)) as a"), DB::raw("ROUND(AVG(l)) as l"), DB::raw("ROUND(AVG(r)) as r"))->first();                /*END old query*/                //var_dump($other_friends_h_value,$other_friends_v_value);                if ($results) {                    $other_friends_h_value = $results->r - $results->l;                    $other_friends_v_value = $results->a - $results->b;                    if ($h_value == 0) {                        $h_value = $other_friends_h_value;                    }                    if ($v_value == 0) {                        $v_value = $other_friends_v_value;                    }                    if($h_value == 5 || $h_value == 0) $h_value = $h_value - 1; else if($h_value == -5) $h_value = $h_value + 1;                    if($v_value == 5 || $v_value == 0) $v_value = $v_value - 1; else if($v_value == -5) $v_value = $v_value + 1;                    $h_value = ($h_value < 0 ? $h_value: '+'.$h_value);                    $v_value = ($v_value < 0 ? $v_value: '+'.$v_value);                    $h_sign = (str_contains($h_value, '-') ? '-' : '+');                    $v_sign = (str_contains($v_value, '-') ? '-' : '+');                    // $v_value = '-1';                    /*if ($h_value == '-5') {                        $h_value = '-4';                    }                    if ($h_value == '+5') {                        $h_value = '+4';                    }                    if ($h_value == '+0') {                        $h_value = '+1';                    }                    if ($h_value == '-0') {                        $h_value = '-1';                    }*/                    $friend_assessment_score['behavior'] = DB::table('score')->where('h', $h_sign)->where('v', $v_sign)->first();                    // enable_query_log();                    $friend_assessment_sub_quadrant['sub_quadrant'] = DB::table('friend_sub_quadrant')                        ->where('h', 'like', '%' . $h_value . '%')                        ->where('v', 'like', '%' . $v_value . '%')                        ->first();                    // get_query_log();                }                // var_dump($friend_assessment_score['behavior'],$friend_assessment_sub_quadrant['sub_quadrant']);die;                $this->data['friend_assessment_record'] = $friend_assessment_score['behavior'];                $this->data['friend_assessment_sub_quadrant'] = $friend_assessment_sub_quadrant['sub_quadrant'];                //var_dump($this->data['friend_assessment_sub_quadrant'],$this->data['friend_assessment_record']);die;                //DB::connection()->enableQueryLog();                $this->data['submission'] = SurveySubmission::leftJoin('employee', function ($join) {                    $join->on('employee.id', '=', 'survey_submission.employee_id');                })                    ->where('survey_submission.employee_id', $employee_id)->whereNull('survey_submission.employee_friend_id')                    ->select('employee.*', 'survey_submission.*')->first();                //$queries = DB::getQueryLog();                //var_dump($queries,$employee_id);die;                $this->file_name = str_slug($this->data['submission']->first_name, '-').'-'.str_slug($this->data['submission']->last_name, '-');                $query_new = SurveySubmission::where('survey_submission.group_id', $group_id);                $query_new->where('p_status', 1);                $employee_result = $query_new->Where('employee_id', $employee_id)->whereNull('employee_friend_id')                    ->first();                //$queries = DB::getQueryLog();                $h_value = $employee_result['r']-$employee_result['l'];                $v_value = $employee_result['a']-$employee_result['b'];                if($h_value == 5 || $h_value == 0) $h_value = $h_value - 1; else if($h_value == -5) $h_value = $h_value + 1;                if($v_value == 5 || $v_value == 0) $v_value = $v_value - 1; else if($v_value == -5) $v_value = $v_value + 1;                $h_value = ($h_value < 0 ? $h_value: '+'.$h_value);                $v_value = ($v_value < 0 ? $v_value: '+'.$v_value);                $h_sign = (str_contains($h_value, '-') ? '-' : '+');                $v_sign = (str_contains($v_value, '-') ? '-' : '+');                $this->data['record'] = DB::table('score')->where('h', $h_sign)->where('v', $v_sign)->first();                $this->data['sub_quadrant'] = DB::table('sub_quadrant')                    ->where('h', 'like', '%' . $h_value . '%')                    ->where('v', 'like', '%' . $v_value . '%')                    ->first();                //var_dump($this->data['sub_quadrant']);die;                $this->data['rater_email_fields'] = RaterEmailField::first();                // dump_($this->data);                // echo View::make('catalog.survey.avg')->with('data', $this->data)->render();die;            /*  $pdf_down=PDF::loadView('catalog.survey.avg', ['data' => $this->data])->save('public/assets/admin/file/Assessment-Result-('.$this->file_name.').pdf', 'overwrite');              echo "PDF generated and saved.";die; */              //                              //  return view('catalog.survey.avg', ['data' => $this->data]);                $pdf_down=PDF::loadView('catalog.survey.avg', ['data' => $this->data]);              return  $pdf_down->download('Assessment-Result-('.$this->file_name.').pdf');                                                             } else {                echo "user hasn't taken his own survey, so we can't send aggregate email.";die;            }        } catch (Exception $e) {            echo $e->getMessage();die;        }    }    public function update_friend_info(Request $request) {        FriendAssessment::where('id', $request->id)->update(['name' => $request->fname, 'last_name' => $request->lname, 'email' => $request->email]);        echo json_encode(['status' => 1, 'message' => 'Data updated successfully!']);die;    }}